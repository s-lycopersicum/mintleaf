import { defineConfig, globalIgnores } from 'eslint/config';
import globals from 'globals';
import js from '@eslint/js';
import ts from 'typescript-eslint';
import react from 'eslint-plugin-react';
import stylistic from '@stylistic/eslint-plugin';
import json from '@eslint/json';
import css from '@eslint/css';

export default defineConfig([
    globalIgnores([
        'eslint.config.js',
        'dist/',
        'package-lock.json',
    ]),
    {
        files: ['**/*.{js,mjs,cjs,ts,jsx,tsx}'],
        languageOptions: {
            globals: globals.browser,
            parserOptions: {
                ecmaFeatures: {
                    impliedStrict: true,
                },
                projectService: true,
                tsconfigRootDir: import.meta.dirname,
            },
        },
        settings: {
            react: {
                version: 'detect',
            },
        },
        plugins: {
            '@stylistic': stylistic,
        },
        extends: [
            js.configs.recommended,
            ts.configs.recommendedTypeChecked,
            react.configs.flat.recommended,
            react.configs.flat['jsx-runtime'],
            stylistic.configs.recommended,
            ts.configs.stylisticTypeChecked,
        ],
        rules: {
            'arrow-body-style': ['warn', 'as-needed'],
            camelcase: 'warn',
            'dot-notation': 'warn',
            eqeqeq: 'warn',
            'logical-assignment-operators': 'warn',
            'no-extra-bind': 'warn',
            'no-extra-boolean-cast': 'warn',
            'no-extra-label': 'warn',
            'no-implicit-coercion': ['warn', { boolean: false, number: true, string: true }],
            'no-lonely-if': 'warn',
            'no-regex-spaces': 'warn',
            'no-undef': 'off',
            'no-undef-init': 'warn',
            'no-unneeded-ternary': 'warn',
            'no-unreachable': 'warn',
            'no-unused-labels': 'warn',
            // 'no-unused-vars': ['warn', { vars: 'all', args: 'after-used', ignoreRestSiblings: false, varsIgnorePattern: '^_', argsIgnorePattern: '^_', destructuredArrayIgnorePattern: '^_' }],
            '@typescript-eslint/no-unused-vars': ['warn', { vars: 'all', args: 'after-used', ignoreRestSiblings: false, varsIgnorePattern: '^_', argsIgnorePattern: '^_', destructuredArrayIgnorePattern: '^_' }],
            'no-useless-computed-key': 'warn',
            'no-useless-rename': 'warn',
            'no-useless-return': 'warn',
            'no-var': 'warn',
            'object-shorthand': 'warn',
            'operator-assignment': 'warn',
            'prefer-arrow-callback': 'warn',
            'prefer-const': 'warn',
            'prefer-template': 'warn',
            'sort-imports': ['warn', { ignoreCase: true, ignoreDeclarationSort: true, ignoreMemberSort: false, memberSyntaxSortOrder: ['multiple', 'single', 'all', 'none'], allowSeparatedGroups: true }],
            '@typescript-eslint/array-type': 'warn',
            '@typescript-eslint/no-array-constructor': 'warn',
            '@stylistic/array-bracket-newline': ['warn', 'consistent'],
            '@stylistic/array-bracket-spacing': 'warn',
            '@stylistic/array-element-newline': ['warn', 'consistent'],
            '@stylistic/arrow-parens': ['warn', 'as-needed'],
            '@stylistic/arrow-spacing': ['warn', { before: true, after: true }],
            '@stylistic/block-spacing': 'warn',
            '@stylistic/brace-style': ['warn', '1tbs', { allowSingleLine: true }],
            '@stylistic/comma-dangle': ['warn', 'always-multiline'],
            '@stylistic/comma-spacing': 'warn',
            '@stylistic/comma-style': 'warn',
            '@stylistic/computed-property-spacing': ['warn', 'never'],
            '@stylistic/dot-location': ['warn', 'property'],
            '@stylistic/eol-last': 'warn',
            '@stylistic/function-call-argument-newline': ['warn', 'consistent'],
            '@stylistic/function-call-spacing': 'warn',
            '@stylistic/function-paren-newline': ['warn', 'multiline-arguments'],
            '@stylistic/generator-star-spacing': ['warn', 'after'],
            '@stylistic/implicit-arrow-linebreak': 'warn',
            '@stylistic/indent': ['warn', 4],
            '@stylistic/jsx-child-element-spacing': 'warn',
            '@stylistic/jsx-closing-bracket-location': 'warn',
            '@stylistic/jsx-closing-tag-location': 'warn',
            '@stylistic/jsx-curly-brace-presence': ['warn', { props: 'never', children: 'never', propElementValues: 'always' }],
            '@stylistic/jsx-curly-newline': 'warn',
            '@stylistic/jsx-curly-spacing': 'warn',
            '@stylistic/jsx-equals-spacing': 'warn',
            '@stylistic/jsx-first-prop-new-line': 'warn',
            '@stylistic/jsx-function-call-newline': 'warn',
            '@stylistic/jsx-indent-props': ['warn', { indentMode: 4, ignoreTernaryOperator: false }],
            '@stylistic/jsx-max-props-per-line': ['warn', { maximum: 1, when: 'multiline' }],
            '@stylistic/jsx-one-expression-per-line': 'off',
            '@stylistic/jsx-quotes': 'warn',
            '@stylistic/jsx-tag-spacing': ['warn', { closingSlash: 'never', beforeSelfClosing: 'always', afterOpening: 'never', beforeClosing: 'never' }],
            '@stylistic/jsx-wrap-multilines': 'warn',
            '@stylistic/key-spacing': 'warn',
            '@stylistic/keyword-spacing': 'warn',
            '@stylistic/linebreak-style': ['warn', 'unix'],
            '@stylistic/lines-between-class-members': ['warn', 'always', { exceptAfterSingleLine: true }],
            '@stylistic/member-delimiter-style': ['warn', { multiline: { delimiter: 'comma', requireLast: true }, singleline: { delimiter: 'comma', requireLast: false }, multilineDetection: 'brackets' }],
            '@stylistic/multiline-ternary': ['warn', 'always-multiline'],
            '@stylistic/new-parens': 'warn',
            '@stylistic/no-confusing-arrow': 'warn',
            '@stylistic/no-extra-parens': ['warn', 'all', { ignoreJSX: 'multi-line' }],
            '@stylistic/no-extra-semi': 'warn',
            '@stylistic/no-floating-decimal': 'warn',
            '@stylistic/no-multi-spaces': 'warn',
            '@stylistic/no-multiple-empty-lines': ['warn', { max: 1, maxEOF: 0 }],
            '@stylistic/no-trailing-spaces': 'warn',
            '@stylistic/no-whitespace-before-property': 'warn',
            '@stylistic/nonblock-statement-body-position': ['warn', 'below'],
            '@stylistic/object-curly-newline': ['warn', { consistent: true }],
            '@stylistic/object-curly-spacing': ['warn', 'always'],
            '@stylistic/object-property-newline': ['warn', { allowAllPropertiesOnSameLine: true }],
            '@stylistic/one-var-declaration-per-line': 'warn',
            '@stylistic/operator-linebreak': ['warn', 'before'],
            '@stylistic/padded-blocks': ['warn', 'never'],
            '@stylistic/quote-props': ['warn', 'as-needed'],
            '@stylistic/quotes': ['warn', 'single', { avoidEscape: true }],
            '@stylistic/rest-spread-spacing': 'warn',
            '@stylistic/semi': ['warn', 'always'],
            '@stylistic/semi-spacing': 'warn',
            '@stylistic/semi-style': 'warn',
            '@stylistic/spaced-comment': ['warn', 'always'],
            '@stylistic/space-before-blocks': 'warn',
            '@stylistic/space-before-function-paren': ['warn', { anonymous: 'always', named: 'never', asyncArrow: 'always' }],
            '@stylistic/space-in-parens': 'warn',
            '@stylistic/space-infix-ops': 'warn',
            '@stylistic/space-unary-ops': ['warn', { words: true, nonwords: false }],
            '@stylistic/switch-colon-spacing': 'warn',
            '@stylistic/template-curly-spacing': 'warn',
            '@stylistic/template-tag-spacing': 'warn',
            '@stylistic/yield-star-spacing': ['warn', 'after'],
            '@stylistic/indent-binary-ops': ['warn', 4],
        },
    },
    {
        files: ['**/*.json'],
        plugins: { json },
        language: 'json/json',
        extends: ['json/recommended'],
    },
    {
        files: ['**/*.css'],
        plugins: { css },
        language: 'css/css',
        extends: ['css/recommended'],
        rules: {
            'css/use-baseline': ['warn', { available: 'widely' }],
        },
    },
]);
